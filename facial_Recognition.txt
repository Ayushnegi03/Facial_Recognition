import cv2
from PIL import Image
from PIL import ImageTk
import threading
import tkinter as tk


def button1_clicked():
	thread = threading.Thread(target=videoLoop, args=())
	thread.start()

def button2_clicked():
	thread = threading.Thread(target=trainloop, args=())
	thread.start()
def button3_clicked():
	thread = threading.Thread(target=browser, args=())
	thread.start()
def button4_clicked():
	thread = threading.Thread(target=close, args=())
	thread.quit()
def close():
	root.destroy()
    
def destroy(panel):
	panel.destroy()
    
    
    
def browser():
	import tkinter as Tk
	from tkinter import filedialog
	filename =  filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("jpeg files","*.jpg"),("all files","*.*")))
	print(filename)
	import cv2
    

	image= cv2.imread(filename)

	gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

	haar_face_cascade= cv2.CascadeClassifier("Cascades\haarcascade_frontalface_default.xml")

	faces= haar_face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)
	for x,y,w,h in faces:
    	cv2.rectangle(image, (x,y), (x+w, y+h), (0,0,255),5)
    
	print("Faces Found", len(faces))
	cv2.imshow("Face Detection", image)
	st='Faces Found: '
	r=len(faces)
	str1=st+str(r)
    
	L3=tk.Label(root, text=str1, font="Helvetica 16 bold")
	L3.place(x=1000, y=450, width=200, height=40)
   	 
	return panel

def videoLoop(mirror=False):
 	#recognizer
 	import cv2
 	import numpy as np
 	import os
 	#import sendemail
	 
 	recognizer = cv2.face.LBPHFaceRecognizer_create()
 	recognizer.read('trainer/trainer.yml')
 	cascadePath = "Cascades/haarcascade_frontalface_default.xml"
 	faceCascade = cv2.CascadeClassifier(cascadePath);
 	font = cv2.FONT_HERSHEY_SIMPLEX
	 
 	subject="HOME SECURITY NOTIFICATION"
 	msg="SOME ONE UNKNOWN IS AT YOUR DOOR. YOUR HOUSE MAY BE AT RISK!"
	 
 	#iniciate id counter
 	id = 0
	 
 	# names related to ids: example ==> Marcelo: id=1,  etc
 	names = ['None',  'rajat', 'ayush']
	 
 	# Initialize and start realtime video capture
 	cam = cv2.VideoCapture(0)
 	cam.set(3, 640) # set video widht
 	cam.set(4, 480) # set video height
	 
 	# Define min window size to be recognized as a face
 	minW = 0.1*cam.get(3)
 	minH = 0.1*cam.get(4)
 	c=0
 	x=0
 	y=0
 	confidence=0
 	h=0
 	w=0
 	while True:
     	ret, img =cam.read()
     	gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    
     	faces = faceCascade.detectMultiScale(
     	gray,
     	scaleFactor = 1.2,
     	minNeighbors = 5,
     	minSize = (int(minW), int(minH)),
     	)
     	for(x,y,w,h) in faces:
        	cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)
        	id, confidence = recognizer.predict(gray[y:y+h,x:x+w])
        	if (confidence < 60):
            	c=0
            	id = names[id]
            	confidence = "  {0}%".format(round(100 - 1.5))
        	else:
            	id = "unknown"
            	confidence = "  {0}%".format(round(100 - 1.5))
            	c=c+1
            	if(c==50):
                	import winsound
                	#sendemail.send_email(subject,msg)
                	winsound.PlaySound('sound.wav', winsound.SND_FILENAME)
            	if(c>50):
                	c=0
     	cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
     	cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)
     	cv2.imshow('camera',img)
     	k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
     	if k == 27:
         	break
 	print("\n [INFO] Exiting Program and cleanup stuff")
 	cam.release()
 	cv2.destroyAllWindows()    
 	return panel

def trainloop(mirror=False):
	import cv2
	import tkinter as tk
	import numpy as np
	from PIL import Image
	import os
	x1 = int(tk.Entry.get(E1))
	path = 'dataset'
	recognizer = cv2.face.LBPHFaceRecognizer_create()
	detector = cv2.CascadeClassifier("Cascades/haarcascade_frontalface_default.xml");

	cam = cv2.VideoCapture(0)
	cam.set(3, 640) # set video width
	cam.set(4, 480) # set video height
    
	print(x1)
	face_detector = cv2.CascadeClassifier('Cascades/haarcascade_frontalface_default.xml')
	# For each person, enter one numeric face id
	face_id = x1
	print("\n [INFO] Initializing face capture. Look the camera and wait ...")
	# Initialize individual sampling face count
	count = 1
	while(True):
    	ret, img = cam.read()
    	gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    	faces = face_detector.detectMultiScale(gray, 1.3, 5)
    	for (x,y,w,h) in faces:
         	cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)	 
         	count += 1
         	# Save the captured image into the datasets folder
         	cv2.imwrite("dataset/User." + str(face_id) + '.' + str(count) + ".jpg", gray[y:y+h,x:x+w])
         	cv2.imshow('image', img)
    	k = cv2.waitKey(100) & 0xff # Press 'ESC' for exiting video
    	if k == 27:
        	break
    	elif count >= 150: # Take n face sample and stop video
        	break
	def getImagesAndLabels(path):
    	imagePaths = [os.path.join(path,f) for f in os.listdir(path)]	 
    	faceSamples=[]
    	ids = []
    	for imagePath in imagePaths:
        	PIL_img = Image.open(imagePath).convert('L') # convert it to grayscale
        	img_numpy = np.array(PIL_img,'uint8')
        	id = int(os.path.split(imagePath)[-1].split(".")[1])
        	faces = detector.detectMultiScale(img_numpy)
        	for (x,y,w,h) in faces:
            	faceSamples.append(img_numpy[y:y+h,x:x+w])
            	ids.append(id)
    	return faceSamples,ids
	print ("\n [INFO] Training faces. It will take a few seconds. Wait ...")
	faces,ids = getImagesAndLabels(path)
	recognizer.train(faces, np.array(ids))
	# Save the model into trainer/trainer.yml
	recognizer.write('trainer/trainer.yml') # recognizer.save() worked on Mac, but not on Pi
	# Print the numer of faces trained and end program
	print("\n [INFO] {0} faces trained. Exiting Program".format(len(np.unique(ids))))

	print("\n [INFO] Exiting Program and cleanup stuff")
	cam.release()
	cv2.destroyAllWindows()
	return panel

root = tk.Tk()
root.geometry("1920x1080+0+0")

L2=tk.Label(root, text="AUTHENTICATION USING FACE RECOGNITION", font="Helvetica 20 bold")
L2.place(x=100, y=10, width=750, height=30)

button1 = tk.Button(root, text="START", bg="#00aba9", font=("",25), command=button1_clicked)
button1.place(x=1000, y=90, width=200, height=60)

button2 = tk.Button(root, text="TRAIN", bg="#ffc40d", font=("",25), command=button2_clicked)
button2.place(x=1000, y=250, width=200, height=60)

L1=tk.Label(root, text="ID:", font="Helvetica 24 bold")
L1.place(x=1000, y=200, width=50, height=40)
E1 = tk.Entry(root, bd =5)
E1.place(x=1050, y=200, width=150, height=40)

button3 = tk.Button(root, text="FACE DETECT", bg="#99b433", font=("",20), command=browser)
button3.place(x=1000, y=350, width=200, height=60)

button4 = tk.Button(root, text="QUIT", bg="#b91d47", font=("",25), command=close)
button4.place(x=1000, y=550, width=200, height=60)


root.mainloop()
